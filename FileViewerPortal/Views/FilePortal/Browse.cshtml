@model IEnumerable<FileItem>

<div class="container mt-4">
    <h2>Directory Contents on @ViewBag.Server.Name</h2>

    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item">
                <a href="@Url.Action("Index", "FilePortal")">Servers</a>
            </li>
            <li class="breadcrumb-item">
                <a href="@Url.Action("Browse", "FilePortal", new { serverId = ViewBag.Server.Id })">@ViewBag.Server.Name</a>
            </li>
            @if (!string.IsNullOrEmpty(ViewBag.RootName))
            {
                <li class="breadcrumb-item">
                    <a href="@Url.Action("Browse", "FilePortal", new { serverId = ViewBag.Server.Id, rootName = ViewBag.RootName })">
                        @ViewBag.RootName
                    </a>
                </li>

                @if (!string.IsNullOrEmpty(ViewBag.Path))
                {
                    var pathParts = ViewBag.Path.Split('/', StringSplitOptions.RemoveEmptyEntries);
                    var currentPath = "";
                    foreach (var part in pathParts)
                    {
                        currentPath = string.IsNullOrEmpty(currentPath) ? part : $"{currentPath}/{part}";
                        <li class="breadcrumb-item">
                            <a href="@Url.Action("Browse", "FilePortal", new { serverId = ViewBag.Server.Id, rootName = ViewBag.RootName, path = currentPath })">
                                @part
                            </a>
                        </li>
                    }
                }
            }
        </ol>
    </nav>

    <!-- Search Form -->
    <div class="card mb-4">
        <div class="card-body">
            <form id="searchForm" class="row g-3">
                <input type="hidden" id="serverId" value="@ViewBag.Server.Id" />
                <input type="hidden" id="rootName" value="@ViewBag.RootName" />
                <input type="hidden" id="currentPath" value="@ViewBag.Path" />

                <div class="col-md-6">
                    <input type="text" class="form-control" id="searchTerm"
                           placeholder="Enter search term..." required>
                </div>
                <div class="col-md-4">
                    <select class="form-select" id="searchType" required>
                        <option value="">Select search type...</option>
                        <option value="MobileNumber">Mobile Number</option>
                        <option value="CustomerId">Customer ID</option>
                        <option value="UniqueId">Unique ID</option>
                    </select>
                </div>
                <div class="col-md-2">
                    <button type="submit" class="btn btn-primary w-100">
                        <i class="bi bi-search"></i> Search
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Results List -->
    <div class="list-group" id="fileList">
        @foreach (var item in Model)
        {
            @if (item.IsDirectory)
            {
                <a href="@Url.Action("Browse", "FilePortal", new { serverId = ViewBag.Server.Id, rootName = item.RootName, path = item.Path })"
                   class="list-group-item list-group-item-action">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <i class="bi bi-folder"></i> @item.Name
                        </div>
                        <small class="text-muted">
                            Last Modified: @item.LastModified.ToLocalTime().ToString("g")
                        </small>
                    </div>
                </a>
            }
            else
            {
                <div class="list-group-item">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="file-item"
                             data-server-id="@ViewBag.Server.Id"
                             data-root="@item.RootName"
                             data-path="@item.Path"
                             style="cursor: pointer;">
                            <i class="bi bi-file-text"></i> @item.Name
                        </div>
                        <div class="text-muted">
                            <small class="me-3">@((item.Size / 1024.0).ToString("N1")) KB</small>
                            <small>Last Modified: @item.LastModified.ToLocalTime().ToString("g")</small>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- Search Results Modal -->
    <div class="modal fade" id="searchResultsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Search Results</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="searchError" class="alert alert-danger d-none"></div>
                    <div id="searchResults" class="list-group">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- File Contents Modal -->
    <div class="modal fade" id="fileContentsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">File Contents</h5>
                    <div class="ms-auto">
                        <small class="text-muted me-3" id="fileInfo"></small>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                </div>
                <div class="modal-body">
                    <div id="fileError" class="alert alert-danger d-none"></div>
                    <pre id="fileContents" class="overflow-auto" style="max-height: 70vh;"></pre>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        // File content viewer
        document.querySelectorAll('.file-item').forEach(item => {
            item.addEventListener('click', async (e) => {
                const element = e.currentTarget;
                const serverId = element.dataset.serverId;
                const rootName = element.dataset.root;
                const path = element.dataset.path;

                showFileContents(serverId, rootName, path);
            });
        });

        // Search form handler
        document.getElementById('searchForm').addEventListener('submit', async (e) => {
            e.preventDefault();

            const searchData = {
                serverId: document.getElementById('serverId').value,
                rootName: document.getElementById('rootName').value,
                path: document.getElementById('currentPath').value,
                searchTerm: document.getElementById('searchTerm').value,
                searchType: document.getElementById('searchType').value
            };

            const searchResults = document.getElementById('searchResults');
            const searchError = document.getElementById('searchError');

            searchResults.innerHTML = '<div class="text-center"><div class="spinner-border" role="status"></div></div>';
            searchError.classList.add('d-none');

            const modal = new bootstrap.Modal(document.getElementById('searchResultsModal'));
            modal.show();

            try {
                const response = await fetch(`/FilePortal/Search`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(searchData)
                });

                const data = await response.json();

                if (data.success) {
                    if (data.results.length === 0) {
                        searchResults.innerHTML = '<div class="text-center">No results found</div>';
                        return;
                    }

                    searchResults.innerHTML = data.results.map(result => `
                                <div class="list-group-item">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <strong class="file-item"
                                                onclick="showFileContents('${searchData.serverId}', '${searchData.rootName}', '${result.filePath}')"
                                                style="cursor: pointer;">
                                            <i class="bi bi-file-text"></i> ${result.fileName}
                                        </strong>
                                        <small class="text-muted">
                                            Last Modified: ${new Date(result.lastModified).toLocaleString()}
                                        </small>
                                    </div>
                                    <div>
                                        <small class="text-muted">Line ${result.lineNumber}:</small>
                                        <pre class="mb-0">${result.matchedContent}</pre>
                                    </div>
                                </div>
                            `).join('');
                } else {
                    searchError.textContent = data.error;
                    searchError.classList.remove('d-none');
                }
            } catch (error) {
                searchError.textContent = 'Error performing search';
                searchError.classList.remove('d-none');
            }
        });

        async function showFileContents(serverId, rootName, path) {
            const modal = new bootstrap.Modal(document.getElementById('fileContentsModal'));
            const fileContents = document.getElementById('fileContents');
            const fileError = document.getElementById('fileError');
            const fileInfo = document.getElementById('fileInfo');

            fileContents.textContent = 'Loading...';
            fileError.classList.add('d-none');
            fileInfo.textContent = '';
            modal.show();

            try {
                const response = await fetch(
                    `/FilePortal/GetFileContents?serverId=${encodeURIComponent(serverId)}&rootName=${encodeURIComponent(rootName)}&path=${encodeURIComponent(path)}`
                );
                const data = await response.json();

                if (data.success) {
                    fileContents.textContent = data.contents;
                    fileError.classList.add('d-none');
                    fileInfo.textContent = `${formatFileSize(data.fileSizeBytes)} | ${data.encoding}`;
                } else {
                    fileContents.textContent = '';
                    fileError.textContent = data.message;
                    fileError.classList.remove('d-none');
                    fileInfo.textContent = data.fileSizeBytes ? formatFileSize(data.fileSizeBytes) : '';
                }
            } catch (error) {
                fileContents.textContent = '';
                fileError.textContent = 'Error loading file contents';
                fileError.classList.remove('d-none');
            }
        }
    </script>
}