@model IEnumerable<FileServer>

<div class="container mt-4">
    <h2>File Servers</h2>

    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var server in Model)
        {
            <div class="col">
                <div class="card h-100" id="server-card-@server.Id">
                    <div class="card-body">
                        <h5 class="card-title">@server.Name</h5>
                        <div class="server-status">
                            <p class="card-text">
                                <span class="badge @(server.IsHealthy ? "bg-success" : "bg-danger")">
                                    @(server.IsHealthy ? "Online" : "Offline")
                                </span>
                            </p>
                            <p class="card-text">
                                <small class="text-muted">
                                    Last checked: <span class="last-checked">@server.LastChecked.ToLocalTime().ToString("g")</span>
                                </small>
                            </p>
                        </div>
                        <div class="d-flex justify-content-between align-items-center">
                            @if (server.IsHealthy)
                            {
                                <a href="@Url.Action("Browse", "FilePortal", new { serverId = server.Id })"
                                   class="btn btn-primary">Browse Files</a>
                            }
                            <button class="btn btn-outline-secondary refresh-status"
                                    data-server-id="@server.Id">
                                <i class="bi bi-arrow-clockwise"></i> Refresh
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.querySelectorAll('.refresh-status').forEach(button => {
            button.addEventListener('click', async (e) => {
                const serverId = e.target.closest('button').dataset.serverId;
                const card = document.getElementById(`server-card-${serverId}`);
                const statusBadge = card.querySelector('.badge');
                const lastChecked = card.querySelector('.last-checked');
                const button = e.target.closest('button');

                // Disable button and show loading
                button.disabled = true;
                button.innerHTML = '<i class="bi bi-arrow-clockwise"></i> Refreshing...';

                try {
                    const response = await fetch(`/LogViewer/FilePortal/RefreshServerStatus?serverId=${encodeURIComponent(serverId)}`);
                    const data = await response.json();

                    if (data.success) {
                        statusBadge.className = `badge ${data.isHealthy ? 'bg-success' : 'bg-danger'}`;
                        statusBadge.textContent = data.isHealthy ? 'Online' : 'Offline';
                        lastChecked.textContent = data.lastChecked;

                        // Update browse button visibility
                        const browseButton = card.querySelector('.btn-primary');
                        if (data.isHealthy && !browseButton) {
                            const buttonContainer = button.parentElement;
                            buttonContainer.insertAdjacentHTML('afterbegin',
                                `<a href="/LogViewer/FilePortal/Browse?serverId=${serverId}" class="btn btn-primary">Browse Files</a>`);
                        } else if (!data.isHealthy && browseButton) {
                            browseButton.remove();
                        }
                    } else {
                        alert(data.message);
                    }
                } catch (error) {
                    alert('Error refreshing server status');
                } finally {
                    // Re-enable button
                    button.disabled = false;
                    button.innerHTML = '<i class="bi bi-arrow-clockwise"></i> Refresh';
                }
            });
        });
    </script>
}